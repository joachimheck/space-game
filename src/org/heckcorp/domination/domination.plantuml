@startuml

title __DOMINATION's Class Diagram__\n

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.Calculator {
        {static} + distance()
        {static} + distance()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.City {
        - productionPoints : int
        {static} - serialVersionUID : long
        + City()
        {static} + getHexFilter()
        + getProductionPoints()
        + getProductionType()
        + incrementProductionPoints()
        + isHidden()
        + isOccupied()
        + setProductionPoints()
        + setProductionType()
        + toString()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.ComputerPlayerView {
        ~ knownCities : Set<City>
        - knownEnemies : Set<Unit>
        - log : Logger
        + ComputerPlayerView()
        + addGamePiece()
        + attack()
        + getKnownCities()
        + getKnownEnemies()
        + getKnownEnemyCities()
        + getMap()
        + message()
        + move()
        + selectHex()
        + setCurrentPlayer()
        + setMainPlayer()
        + setMap()
        + setMonitor()
        + setPlayer()
        + setShadowMap()
        + setStatus()
        + setWinningPlayer()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.Constants {
        {static} + ACTION_END_TURN : String
        {static} + ACTION_LOAD_GAME : String
        {static} + ACTION_SAVE_GAME : String
        {static} + ACTION_SKIP_UNIT : String
        {static} + ACTION_SLEEP_UNIT : String
        {static} + ACTION_TOGGLE_HEX_HIDING : String
        {static} + ACTION_WAIT_UNIT : Object
        {static} + COMPUTER_PLAYER_COLOR : Color
        {static} + GAME_NAME : String
        {static} + HUMAN_PLAYER_COLOR : Color
        {static} + INSTRUCTIONS_FILE : String
        {static} + LOGGING_CONFIG_FILE : String
        {static} + MAJOR_VERSION : int
        {static} + MAP_HEIGHT : int
        {static} + MAP_WIDTH : int
        {static} + MINOR_VERSION : int
        {static} + NEUTRAL_CITIES : int
        {static} + NEUTRAL_PLAYER_COLOR : Color
        {static} + PAUSE_TIME : int
        {static} + PLAYER_CITIES : int
        {static} + RELEASE_NOTES_FILE : String
        {static} + UI_COMPONENT_LARGE_HEIGHT : int
        {static} + UI_COMPONENT_LARGE_WIDTH : int
        {static} + UI_COMPONENT_SMALL_HEIGHT : int
        {static} + UI_COMPONENT_SMALL_WIDTH : int
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.DefaultModel {
        - log : Logger
        - players : List<Player>
        {static} - serialVersionUID : long
        + addGamePiece()
        + addPlayer()
        + destroyUnit()
        + endTurn()
        + getGameStateManager()
        + getHex()
        + getSelectedCity()
        + getTurnManager()
        + getUnits()
        + moveSelectedUnit()
        + selectHex()
        + selectUnit()
        + setCurrentPlayer()
        + setMap()
        + setSelectedCityProductionType()
        + setSelectedUnitDestination()
        + setWinningPlayer()
        + skipSelectedUnit()
        + sleepSelectedUnit()
        + startTurnManager()
        + toggleHexHiding()
        + waitSelectedUnit()
        - attack()
        - moveSelectedUnitOneHex()
        - setStatus()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.DefaultModel.GameStateManager {
        - in : ObjectInputStream
        + initializeModel()
        + setInputStream()
        + write()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.DefaultModel.ViewMultiplexer {
        - gameViews : Set<GameView>
        + addGamePiece()
        + addGameView()
        + attack()
        + message()
        + move()
        + selectHex()
        + setCurrentPlayer()
        + setMainPlayer()
        + setMap()
        + setMonitor()
        + setShadowMap()
        + setStatus()
        + setWinningPlayer()
    }
  }
  

  namespace org.heckcorp.domination {
    enum Direction {
      NORTH
      NORTHEAST
      NORTHWEST
      SOUTH
      SOUTHEAST
      SOUTHWEST
      name
      value
    }
  }
  

  namespace org.heckcorp.domination {
    interface org.heckcorp.domination.GameController {
        {abstract} + setCurrentPlayer()
        {abstract} + setModel()
        {abstract} + startGame()
    }
  }
  

  namespace org.heckcorp.domination {
    interface org.heckcorp.domination.GameModel {
        {abstract} + addGamePiece()
        {abstract} + addPlayer()
        {abstract} + endTurn()
        {abstract} + getHex()
        {abstract} + getSelectedCity()
        {abstract} + getTurnManager()
        {abstract} + getUnits()
        {abstract} + moveSelectedUnit()
        {abstract} + selectHex()
        {abstract} + selectUnit()
        {abstract} + setMap()
        {abstract} + setSelectedCityProductionType()
        {abstract} + setSelectedUnitDestination()
        {abstract} + skipSelectedUnit()
        {abstract} + sleepSelectedUnit()
        {abstract} + startTurnManager()
        {abstract} + toggleHexHiding()
        {abstract} + waitSelectedUnit()
    }
  }
  

  namespace org.heckcorp.domination {
    abstract class org.heckcorp.domination.GamePiece {
        + getHex()
        + getOwner()
        + getPosition()
        {abstract} + isHidden()
        + setHex()
        + setOwner()
    }
  }
  

  namespace org.heckcorp.domination {
    enum HexOwnership {
      ANY
      EMPTY
      ENEMY
      PLAYER
    }
  }
  

  namespace org.heckcorp.domination {
    interface org.heckcorp.domination.GameView {
        {abstract} + addGamePiece()
        {abstract} + attack()
        {abstract} + message()
        {abstract} + move()
        {abstract} + selectHex()
        {abstract} + setCurrentPlayer()
        {abstract} + setMainPlayer()
        {abstract} + setMap()
        {abstract} + setMonitor()
        {abstract} + setShadowMap()
        {abstract} + setStatus()
        {abstract} + setWinningPlayer()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.Hex {
        + elevation : int
        + x : int
        + y : int
        {static} - serialVersionUID : long
        - units : List<Unit>
        + Hex()
        + addCity()
        + addUnit()
        + getBestDefender()
        + getCity()
        + getOwner()
        + getPosition()
        + getUnits()
        + isAdjacentTo()
        + isEmpty()
        + removeUnit()
        + toString()
    }
  }
  

  namespace org.heckcorp.domination {
    enum Terrain {
      LAND
      WATER
      name
      value
    }
  }
  

  namespace org.heckcorp.domination {
    abstract class org.heckcorp.domination.HexFilter {
        {abstract} + accept()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.HexMap {
        + height : int
        + width : int
        - hexes : Hex[][]
        - log : Logger
        {static} - serialVersionUID : long
        + HexMap()
        + HexMap()
        + HexMap()
        + addGamePiece()
        {static} + adjacent()
        {static} + getAdjacent()
        + getAdjacentHex()
        + getAdjacentHexes()
        {static} + getAllAdjacent()
        {static} + getClosest()
        {static} + getDirection()
        {static} + getDirection()
        + getHex()
        + getHex()
        + getHexes()
        + getHexes()
        + getHexesAtRange()
        + getHexesInRange()
        + getPathfinder()
        + getRandomHex()
        + getRandomHex()
        + getSize()
        + getTerrains()
        {static} + isAdjacent()
        + isInMap()
        + write()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.HexMap.MapInfo {
        + elevations : int[][]
        + height : int
        + maxElevation : int
        + minElevation : int
        + terrains : Terrain[][]
        + width : int
        + MapInfo()
        + MapInfo()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.HexMap.MapInfoGenerator {
        - elevations : int[][]
        - maxElevation : int
        - minElevation : int
        + MapInfoGenerator()
        + generateMapInfo()
        - findContinents()
        - generateElevations()
        {static} - isAnyPointElevated()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.LogFormatter {
        + format()
    }
  }
  

  namespace org.heckcorp.domination {
    interface org.heckcorp.domination.ModelInitializer {
        {abstract} + initializeModel()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.NewGameInitializer {
        - height : int
        - width : int
        + NewGameInitializer()
        + createCities()
        {static} + createPlayer()
        + initializeModel()
        - createPlayers()
        - createUnits()
    }
  }
  

  namespace org.heckcorp.domination {
    abstract class org.heckcorp.domination.Player {
        {static} # log : Logger
        - cities : Set<City>
        - color : Color
        - name : String
        - units : Set<Unit>
        + Player()
        + addGamePiece()
        + clearReadyUnit()
        + finishTurn()
        + getCities()
        + getColor()
        + getGamePieces()
        + getLog()
        + getName()
        + getReadyUnit()
        + getShadowMap()
        + getType()
        + getUnits()
        + getView()
        {abstract} + move()
        + removeCity()
        + removeGamePiece()
        + removeUnit()
        + setReadyUnit()
        + setView()
        + startTurn()
        + turnFinished()
        + unitActionFinished()
        + updateShadowMap()
        + write()
    }
  }
  

  namespace org.heckcorp.domination {
    enum PlayerType {
      COMPUTER
      HUMAN
      NEUTRAL
    }
  }
  

  namespace org.heckcorp.domination {
    interface org.heckcorp.domination.Positionable {
        {abstract} + getPosition()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.ShadowMap {
        + height : int
        + width : int
        - active : boolean
        - borderPoints : Set<Point>
        - explored : BitSet
        {static} - inactiveStatus : ShadowStatus
        {static} - serialVersionUID : long
        - visible : BitSet
        + ShadowMap()
        + ShadowMap()
        + clearVisible()
        + clearVisible()
        + diff()
        + getBorderPoints()
        + getSize()
        + getStatus()
        + getStatus()
        + isActive()
        + isExplored()
        + isVisible()
        + setActive()
        + setExplored()
        + setVisible()
        - change()
        - isInMap()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.ShadowStatus {
        - explored : boolean
        - visible : boolean
        + ShadowStatus()
        + equals()
        + isExplored()
        + isVisible()
    }
  }
  

  namespace org.heckcorp.domination {
    enum Status {
      DAMAGED
      DESTROYED
      HEALTHY
      HIDDEN
      REVEALED
      SELECTED
      SKIPPED
      UNSELECTED
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.Unit {
        - asleep : boolean
        - attacksLeft : int
        {static} - log : Logger
        - movesLeft : int
        - path : List<Hex>
        {static} - serialVersionUID : long
        - skipped : boolean
        {static} - terrainHexFilters : Map<Type, HexFilter>
        + Unit()
        + attack()
        + canAttack()
        + canEnterHex()
        + canEnterTerrain()
        + canMoveAlongPath()
        + clearPath()
        + decreaseAttacksLeft()
        + decreaseMovesLeft()
        + getAccessibleHexes()
        + getAttack()
        + getAttackHexFilter()
        + getAttacks()
        + getAttacksLeft()
        + getDefense()
        + getFuelLeft()
        + getHealth()
        {static} + getHexFilter()
        + getLastHex()
        + getMovement()
        + getMovementHexFilter()
        + getMovesLeft()
        + getMovesMade()
        + getNextDirection()
        + getPath()
        + getRange()
        + getType()
        + isAsleep()
        + isDamaged()
        + isDestroyed()
        + isHexInRange()
        + isHidden()
        + isInRange()
        + isLowOnFuel()
        + isOutOfFuel()
        + isReadyForAction()
        + isSafe()
        + isSkipped()
        + move()
        + reset()
        + setAsleep()
        + setAttacksLeft()
        + setHealth()
        + setHex()
        + setMovesLeft()
        + setPath()
        + skip()
        + takeDamage()
        + toString()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.Unit.AttackHexFilter {
        + AttackHexFilter()
        + accept()
    }
  }
  

  namespace org.heckcorp.domination {
    enum Health {
      DAMAGED
      DESTROYED
      HEALTHY
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.Unit.MovementHexFilter {
        + MovementHexFilter()
        + accept()
    }
  }
  

  namespace org.heckcorp.domination {
    class org.heckcorp.domination.Unit.TerrainHexFilter {
        + TerrainHexFilter()
        + accept()
    }
  }
  

  namespace org.heckcorp.domination {
    enum Type {
      BOMBER
      SOLDIER
      TANK
      attack
      attacks
      cost
      defense
      id
      movement
      name
    }
  }
  

  namespace org.heckcorp.domination {
    interface org.heckcorp.domination.ViewMonitor {
        {abstract} + hexClicked()
        {abstract} + setViewingPlayerActive()
    }
  }
  

  org.heckcorp.domination.City .up.|> java.io.Serializable
  org.heckcorp.domination.City -up-|> org.heckcorp.domination.GamePiece
  org.heckcorp.domination.City o-- org.heckcorp.domination.Unit.Type : productionType
  org.heckcorp.domination.ComputerPlayerView .up.|> org.heckcorp.domination.GameView
  org.heckcorp.domination.ComputerPlayerView o-- org.heckcorp.domination.HexMap : map
  org.heckcorp.domination.ComputerPlayerView o-- org.heckcorp.domination.desktop.ComputerPlayer : player
  org.heckcorp.domination.DefaultModel .up.|> java.io.Serializable
  org.heckcorp.domination.DefaultModel .up.|> org.heckcorp.domination.GameModel
  org.heckcorp.domination.DefaultModel o-- org.heckcorp.domination.Player : currentPlayer
  org.heckcorp.domination.DefaultModel o-- org.heckcorp.domination.DefaultModel.GameStateManager : gameStateManager
  org.heckcorp.domination.DefaultModel o-- org.heckcorp.domination.HexMap : map
  org.heckcorp.domination.DefaultModel o-- org.heckcorp.domination.City : selectedCity
  org.heckcorp.domination.DefaultModel o-- org.heckcorp.domination.Unit : selectedUnit
  org.heckcorp.domination.DefaultModel o-- org.heckcorp.domination.desktop.TurnManager : turnManager
  org.heckcorp.domination.DefaultModel o-- org.heckcorp.domination.DefaultModel.ViewMultiplexer : views
  org.heckcorp.domination.DefaultModel +-down- org.heckcorp.domination.DefaultModel.GameStateManager
  org.heckcorp.domination.DefaultModel +-down- org.heckcorp.domination.DefaultModel.ViewMultiplexer
  org.heckcorp.domination.DefaultModel.GameStateManager .up.|> org.heckcorp.domination.ModelInitializer
  org.heckcorp.domination.DefaultModel.ViewMultiplexer .up.|> org.heckcorp.domination.GameView
  org.heckcorp.domination.GamePiece .up.|> java.io.Serializable
  org.heckcorp.domination.GamePiece .up.|> org.heckcorp.domination.Positionable
  org.heckcorp.domination.GamePiece o-- org.heckcorp.domination.Hex : hex
  org.heckcorp.domination.GamePiece o-- org.heckcorp.domination.Player : owner
  org.heckcorp.domination.GamePiece +-down- org.heckcorp.domination.GamePiece.HexOwnership
  org.heckcorp.domination.Hex .up.|> java.io.Serializable
  org.heckcorp.domination.Hex .up.|> org.heckcorp.domination.Positionable
  org.heckcorp.domination.Hex o-- org.heckcorp.domination.Hex.Terrain : terrain
  org.heckcorp.domination.Hex o-- org.heckcorp.domination.City : city
  org.heckcorp.domination.Hex o-- org.heckcorp.domination.Player : owner
  org.heckcorp.domination.Hex +-down- org.heckcorp.domination.Hex.Terrain
  org.heckcorp.domination.HexMap .up.|> java.io.Serializable
  org.heckcorp.domination.HexMap o-- org.heckcorp.domination.desktop.Pathfinder : pathfinder
  org.heckcorp.domination.HexMap +-down- org.heckcorp.domination.HexMap.MapInfo
  org.heckcorp.domination.HexMap +-down- org.heckcorp.domination.HexMap.MapInfoGenerator
  org.heckcorp.domination.HexMap.MapInfoGenerator o-- org.heckcorp.domination.HexMap : map
  org.heckcorp.domination.LogFormatter -up-|> java.util.logging.Formatter
  org.heckcorp.domination.NewGameInitializer .up.|> org.heckcorp.domination.ModelInitializer
  org.heckcorp.domination.Player .up.|> java.io.Serializable
  org.heckcorp.domination.Player o-- org.heckcorp.domination.GameView : view
  org.heckcorp.domination.Player o-- org.heckcorp.domination.Unit : readyUnit
  org.heckcorp.domination.Player o-- org.heckcorp.domination.ShadowMap : shadowMap
  org.heckcorp.domination.Player +-down- org.heckcorp.domination.Player.PlayerType
  org.heckcorp.domination.ShadowMap .up.|> java.io.Serializable
  org.heckcorp.domination.ShadowMap -up-|> java.util.Observable
  org.heckcorp.domination.Unit .up.|> java.io.Serializable
  org.heckcorp.domination.Unit -up-|> org.heckcorp.domination.GamePiece
  org.heckcorp.domination.Unit o-- org.heckcorp.domination.Unit.Health : health
  org.heckcorp.domination.Unit o-- org.heckcorp.domination.Hex : lastHex
  org.heckcorp.domination.Unit o-- org.heckcorp.domination.Unit.Type : type
  org.heckcorp.domination.Unit +-down- org.heckcorp.domination.Unit.AttackHexFilter
  org.heckcorp.domination.Unit +-down- org.heckcorp.domination.Unit.Health
  org.heckcorp.domination.Unit +-down- org.heckcorp.domination.Unit.MovementHexFilter
  org.heckcorp.domination.Unit +-down- org.heckcorp.domination.Unit.TerrainHexFilter
  org.heckcorp.domination.Unit +-down- org.heckcorp.domination.Unit.Type
  org.heckcorp.domination.Unit.AttackHexFilter -up-|> org.heckcorp.domination.Unit.TerrainHexFilter
  org.heckcorp.domination.Unit.AttackHexFilter o-- org.heckcorp.domination.Unit : unit
  org.heckcorp.domination.Unit.MovementHexFilter -up-|> org.heckcorp.domination.Unit.TerrainHexFilter
  org.heckcorp.domination.Unit.MovementHexFilter o-- org.heckcorp.domination.Unit : unit
  org.heckcorp.domination.Unit.TerrainHexFilter -up-|> org.heckcorp.domination.HexFilter
  org.heckcorp.domination.Unit.TerrainHexFilter o-- org.heckcorp.domination.Unit.Type : type


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
